name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "main" ]
    paths: ["to_get.txt"]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  MODELS_FILE: models.md
  DATASETS_FILE: datasets.md
  # 一行一个数据元素，repo_type:repo_id
  TO_GET_FILE: to_get.txt


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read to_get.txt
        id: read_to_get
        run: |
          echo "::set-output name=to_get::$(cat to_get.txt)"

      - name: Read models.md
        id: read_models
        run: |
          echo "::set-output name=models::$(cat models.md)"

      - name: Read datasets.md
        id: read_datasets
        run: |
          echo "::set-output name=datasets::$(cat datasets.md)"

      - name: Filter elements
        id: filter_elements
        run: |
          to_get=$(echo "${{ steps.read_to_get.outputs.to_get }}" | tr '\n' ',')
          models=$(echo "${{ steps.read_models.outputs.models }}" | tr '\n' ',')
          datasets=$(echo "${{ steps.read_datasets.outputs.datasets }}" | tr '\n' ',')

          filtered_elements=""
          # 使用awk命令将to_get、models和datasets中的元素分别存储到数组中
          IFS=',' read -ra to_get_array <<< "$to_get"
          IFS=',' read -ra models_array <<< "$models"
          IFS=',' read -ra datasets_array <<< "$datasets"
          
          # 遍历to_get数组，将不在models和datasets数组中的元素输出
          for element in "${to_get_array[@]}"; do
              if [[ ! " ${models_array[@]} " =~ " ${element} " ]] && [[ ! " ${datasets_array[@]} " =~ " ${element} " ]]; then
                  filtered_elements="$element,$filtered_elements"
              fi
          done
          
          filtered_elements=$(python filter_elements.py "$to_get" "$models" "$datasets")
          echo "::set-output name=filtered_elements::${filtered_elements}"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ secret.DOCKERHUB_USERNAME }}/${{ matrix.targets.repo_type }}:${{ matrix.targets.repo_id }}
          build-args: REPO_TYPE=${{ matrix.targets.repo_type }},REPO_ID=${{ matrix.targets.repo_id }},REPO_DIR_NAME=${{ matrix.targets.repo_type }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
